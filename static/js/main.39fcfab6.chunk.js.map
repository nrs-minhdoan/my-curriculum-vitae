{"version":3,"sources":["serviceWorker.js","themes/styles.js","components/UI/Tabs/Tabs.jsx","themes/colors.js","containers/CurriculumVitae.jsx","App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","center","css","Wrapper","styled","div","Tab","props","activated","Bar","size","active","Tabs","data","onChange","length","map","item","index","key","onClick","defaultProps","MemoTabs","memo","tabs","CurriculumVitae","useState","tab","setTab","_handleChangeTab","useCallback","value","Container","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,uKChBC,IAAMC,EAASC,YAAH,K,6kBCKnB,IAAMC,EAAUC,IAAOC,IAAV,KAOPC,EAAMF,IAAOC,IAAV,KAKE,SAAAE,GAAK,OAAKA,EAAMC,UCnBJ,UAEF,YDkBjBP,GAIEQ,EAAML,IAAOC,IAAV,KACc,SAAAE,GAAK,OAAIA,EAAMG,OCzBf,WD+Bb,SAAAH,GAAK,4BAAmBA,EAAMI,OAAzB,cAAqCJ,EAAMG,KAA3C,QAIf,SAASE,EAAT,GAA2C,IAA3BC,EAA0B,EAA1BA,KAAMF,EAAoB,EAApBA,OAAQG,EAAY,EAAZA,SACtBJ,EAAOG,EAAKE,OAClB,OACE,kBAACZ,EAAD,KACE,kBAACM,EAAD,CAAKC,KAAMA,EAAMC,OAAQA,IACxBE,EAAKG,KAAI,SAACC,EAAMC,GAAP,OACR,kBAACZ,EAAD,CACEa,IAAG,cAASD,GACZV,UAAWU,IAAUP,EACrBS,QAAS,kBAAMN,EAASI,KAEvBD,OAOXL,EAAKS,aAAe,CAClBR,KAAM,GACNF,OAAQ,EACRG,SAAU,cASZ,IAEeQ,EAFEC,eAAKX,G,2KE1DtB,IAAMT,EAAUC,IAAOC,IAAV,IDNY,UAKG,sBCQtBmB,EAAO,CAAC,SAAU,aAAc,YAAa,kBAgBpCC,MAdf,WAA4B,IAAD,EACHC,mBAAS,GADN,mBAClBC,EADkB,KACbC,EADa,KAGnBC,EAAmBC,uBAAY,SAAAC,GACnCH,EAAOG,KACN,IAEH,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAMlB,KAAMW,EAAMb,OAAQgB,EAAKb,SAAUe,M,+LCjB/C,IAAMG,EAAY5B,IAAOC,IAAV,IFHiB,UES5BJ,GAWWgC,MARf,WACE,OACE,kBAACD,EAAD,KACE,kBAAC,EAAD,Q,MCZNE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SN2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.39fcfab6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { css } from \"styled-components\";\n\nexport const center = css`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nimport { WHITE, PRIMARY } from \"../../../themes/colors\";\nimport { center } from \"../../../themes/styles\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  display: flex;\n  align-items: center;\n  z-index: 1;\n`;\n\nconst Tab = styled.div`\n  flex: 1;\n  padding: 10px;\n  cursor: pointer;\n  font-weight: 600;\n  color: ${props => (props.activated ? PRIMARY : WHITE)};\n  ${center};\n  transition: color 0.3s ease;\n`;\n\nconst Bar = styled.div`\n  width: calc(100% / ${props => props.size});\n  height: 3px;\n  background-color: ${PRIMARY};\n  position: absolute;\n  z-index: 2;\n  bottom: -2px;\n  left: ${props => `calc(100% * ${props.active} / ${props.size})`};\n  transition: left 0.3s ease;\n`;\n\nfunction Tabs({ data, active, onChange }) {\n  const size = data.length;\n  return (\n    <Wrapper>\n      <Bar size={size} active={active} />\n      {data.map((item, index) => (\n        <Tab\n          key={`tab-${index}`}\n          activated={index === active}\n          onClick={() => onChange(index)}\n        >\n          {item}\n        </Tab>\n      ))}\n    </Wrapper>\n  );\n}\n\nTabs.defaultProps = {\n  data: [],\n  active: 0,\n  onChange: () => {}\n};\n\nTabs.propTypes = {\n  data: PropTypes.array.isRequired,\n  active: PropTypes.number,\n  onChange: PropTypes.func.isRequired\n};\n\nconst MemoTabs = memo(Tabs);\n\nexport default MemoTabs;\n","export const PRIMARY = \"#61dafb\";\nexport const SECONDARY = \"#20232a\";\nexport const WHITE = \"#ffffff\";\nexport const BLACK = \"#000000\";\n\nexport const BACKGROUND_COLOR = \"#292c33\";\nexport const SHADOW_COLOR = 'rgba(0, 0, 0, 0.8)';\n","import React, { useState, useCallback } from \"react\";\nimport styled from \"styled-components\";\n\nimport Tabs from \"../components/UI/Tabs/Tabs\";\n\nimport { SECONDARY, SHADOW_COLOR } from \"../themes/colors\";\n\nconst Wrapper = styled.div`\n  width: 55%;\n  height: 1500px;\n  background-color: ${SECONDARY};\n  box-shadow: 0px 15px 60px -10px ${SHADOW_COLOR};\n`;\n\nconst tabs = [\"Skills\", \"Experience\", \"Education\", \"Certifications\"];\n\nfunction CurriculumVitae() {\n  const [tab, setTab] = useState(0);\n\n  const _handleChangeTab = useCallback(value => {\n    setTab(value);\n  }, []);\n\n  return (\n    <Wrapper>\n      <Tabs data={tabs} active={tab} onChange={_handleChangeTab} />\n    </Wrapper>\n  );\n}\n\nexport default CurriculumVitae;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport CurriculumVitae from \"./containers/CurriculumVitae\";\n\nimport { BACKGROUND_COLOR } from \"./themes/colors\";\nimport { center } from \"./themes/styles\";\n\nconst Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  padding-top: 100px;\n  padding-bottom: 100px;\n  background-color: ${BACKGROUND_COLOR};\n  ${center}\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <CurriculumVitae />\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}